diff --git a/lib/memstore.js b/lib/memstore.js
index d2b915c..6b0a0b1 100644
--- a/lib/memstore.js
+++ b/lib/memstore.js
@@ -36,7 +36,7 @@ var util = require('util');
 
 function MemoryCookieStore() {
   Store.call(this);
-  this.idx = {};
+  this.idx = Object.create(null);
 }
 util.inherits(MemoryCookieStore, Store);
 exports.MemoryCookieStore = MemoryCookieStore;
@@ -115,10 +115,10 @@ MemoryCookieStore.prototype.findCookies = function(domain, path, cb) {
 
 MemoryCookieStore.prototype.putCookie = function(cookie, cb) {
   if (!this.idx[cookie.domain]) {
-    this.idx[cookie.domain] = {};
+    this.idx[cookie.domain] = Object.create(null);
   }
   if (!this.idx[cookie.domain][cookie.path]) {
-    this.idx[cookie.domain][cookie.path] = {};
+    this.idx[cookie.domain][cookie.path] = Object.create(null);
   }
   this.idx[cookie.domain][cookie.path][cookie.key] = cookie;
   cb(null);
@@ -150,7 +150,7 @@ MemoryCookieStore.prototype.removeCookies = function(domain, path, cb) {
 };
 
 MemoryCookieStore.prototype.removeAllCookies = function(cb) {
-  this.idx = {};
+  this.idx = Object.create(null);
   return cb(null);
 }
 
diff --git a/test/cookie_jar_test.js b/test/cookie_jar_test.js
index 67809b9..37aaff0 100644
--- a/test/cookie_jar_test.js
+++ b/test/cookie_jar_test.js
@@ -479,8 +479,31 @@ vows
         assert.strictEqual(cookies[0].value, 'FooBar');
       }
     }
-  })
-  .addBatch({
+  }).addBatch({
+  "Issue #282 - Prototype pollution": {
+    "when setting a cookie with the domain __proto__": {
+      topic: function() {
+        const jar = new tough.CookieJar(undefined, {
+          rejectPublicSuffixes: false
+        });
+        // try to pollute the prototype
+        jar.setCookieSync(
+          "Slonser=polluted; Domain=__proto__; Path=/notauth",
+          "https://__proto__/admin"
+        );
+        jar.setCookieSync(
+          "Auth=Lol; Domain=google.com; Path=/notauth",
+          "https://google.com/"
+        );
+        this.callback();
+      },
+      "results in a cookie that is not affected by the attempted prototype pollution": function() {
+        const pollutedObject = {};
+        assert(pollutedObject["/notauth"] === undefined);
+      }
+    }
+  }
+  }).addBatch({
     "Remove all cookies": {
       topic: function () {
         var jar = new CookieJar();
diff --git a/test/ietf_data/parser.json b/test/ietf_data/parser.json
index c40ad54..007c572 100644
--- a/test/ietf_data/parser.json
+++ b/test/ietf_data/parser.json
@@ -10,12 +10,8 @@
   },
   {
     "test": "0002",
-    "received": [
-      "foo=bar; Expires=Fri, 07 Aug 2019 08:04:19 GMT"
-    ],
-    "sent": [
-      { "name": "foo", "value": "bar" }
-    ]
+    "received": ["foo=bar; Expires=Fri, 07 Aug 9999 08:04:19 GMT"],
+    "sent": [{ "name": "foo", "value": "bar" }]
   },
   {
     "test": "0003",
@@ -706,21 +702,13 @@
   },
   {
     "test": "COMMA0006",
-    "received": [
-      "foo=bar; Expires=Fri, 07 Aug 2019 08:04:19 GMT"
-    ],
-    "sent": [
-      { "name": "foo", "value": "bar" }
-    ]
+    "received": ["foo=bar; Expires=Fri, 07 Aug 9999 08:04:19 GMT"],
+    "sent": [{ "name": "foo", "value": "bar" }]
   },
   {
     "test": "COMMA0007",
-    "received": [
-      "foo=bar; Expires=Fri 07 Aug 2019 08:04:19 GMT, baz=qux"
-    ],
-    "sent": [
-      { "name": "foo", "value": "bar" }
-    ]
+    "received": ["foo=bar; Expires=Fri 07 Aug 9999 08:04:19 GMT, baz=qux"],
+    "sent": [{ "name": "foo", "value": "bar" }]
   },
   {
     "test": "DISABLED_CHROMIUM0020",
